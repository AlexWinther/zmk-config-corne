/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define hrml(k1, k2, k3, k4) &ht LGUI k1  &ht LALT k2  &ht LCTL k3  &ht LSFT k4
#define hrmr(k1, k2, k3, k4) &ht RSFT k1  &ht RCTL k2  &ht RALT k3  &ht RGUI k4

#define NUMBERS 1
#define SYMBOLS 2
#define MISC 3

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;    // slightly increased for more reliable shifts
            require-prior-idle-ms = <100>; // helps with rapid key sequences
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
    macros {
        backout: backout {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp DOT>
                , <&macro_tap &kp DOT>
                , <&macro_tap &kp SLASH>
                ;
        };
    };
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  F  |  P  |  D   |  L  |  X  |   |  ;  |   U   |  O  |  Y  |  B  |  Z   |
// | CTRL |  S  |  N  |  T   |  H  |  K  |   |  ,  |   A   |  E  |  I  |  C  |  Q   |
// | \    |  V  |  W  |  G   |  M  |  J  |   |  -  |   .   |  '  |  =  |  /  | ESC  |
//                    | BSPC |  R  | RET |   | ESC | SPACE | TAB |
                        bindings = <
   &kp TAB   &kp F   &kp P  &kp D &kp L  &kp X   &kp SEMICOLON &kp U  &kp O   &kp Y   &kp B    &kp Z
   &kp LCTRL &ht LGUI S  &ht LALT N  &ht LCTL T  &ht LSFT H  &kp K    &kp COMMA &ht RSFT A  &ht RCTL E  &ht RALT I  &ht RGUI C  &kp Q
   &kp BACKSLASH &kp V   &kp W  &kp G &kp M  &kp J   &kp MINUS &kp DOT  &kp APOS   &kp EQUAL   &kp SLASH    &kp ESC
                  &kp BSPC  &lt SYMBOLS R  &kp RET   &kp ESC &lt NUMBERS SPACE &kp TAB
                        >;
                };
                number_layer {
// -----------------------------------------------------------------------------------------
// | TAB  |  +  |  7  |  8  |  9  |  *  |   |     |     |     |     |     | BSPC |
// | CTRL |  =  |  1  |  2  |  3  |  0  |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |  -  |  4  |  5  |  6  |  /  |   |     |     |     |     |     |      |
//                    |BSPC | SPACE | RET |   | ESC |     | TAB |
                        bindings = <
    &kp TAB    &kp PLUS   &kp N7       &kp N8       &kp N9       &kp ASTRK         &trans   &trans   &trans &trans    &trans &kp BSPC
    &kp LCTRL  &kp EQUAL  &kp N1       &kp N2       &kp N3       &kp N0            &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
    &kp LSHFT  &kp MINUS  &kp N4       &kp N5       &kp N6       &bt SLASH         &trans   &trans   &trans &trans    &trans &trans
                                    &trans     &trans       &trans      &trans  &trans   &trans
   // &kp TAB    &kp PLUS   &kp N7       &kp N8       &kp N9       &kp SLASH         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
   // &kp LCTRL  &kp N0     &kp N1       &kp N2       &kp N3       &kp EQUAL       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
   // &kp LSHFT  &kp MINUS  &kp N4       &kp N5       &kp N6       &bt ASTRK   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
   //                                  &trans     &lt SYMBOLS SPACE    &trans      &trans  &trans   &trans
                        >;
                };

                symbol_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  %  |  [  |  ]  |  $  |  &  |   |  .  |  "  |  <  |  >  |  '  | BSPC |
// | CTRL |  ?  |  (  |  )  |  :  |  |  |   |  #  |  =  |  +  |  -  |  !  | CTRL |
// | SHFT |  @  |  {  |  }  |  ~  |     |   | ../ |  \  |  *  |  /  |  ^  | SHFT |
//                    |BSPC |     | RET |   | ESC |     | TAB |
                        bindings = <
    &kp TAB    &kp PRCNT &kp LBKT &kp RBKT &kp DLLR &kp AMPS   &kp DOT   &kp QUOTE &kp LSS &kp GTR &kp APOS &kp BSPC
    &kp LCTRL  &kp QUES  &kp LPAR &kp RPAR &kp COLN &kp PIPE   &kp HASH  &kp EQUAL &kp PLUS &kp MINUS &kp EXCL &kp LCTRL
    &kp LSHFT  &kp AT    &kp LBRC &kp RBRC &kp TILDE &trans    &kp DOT   &kp BSLH &bt ASTRK &kp SLASH &kp CARET &kp RSHFT
                                    &trans     &trans       &trans      &trans  &trans   &trans
                        >;
                };
                misc_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |     | VD  | VU  | BD  | BU  |   |     | PRV | PLY | NXT |     | BSPC |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp TAB    &kp trans     &kp C_VOL_DN &kp C_VOL_UP &kp C_BRI_DEC &kp C_BRI_INC  &trans   &kp C_PREV &kp C_PP &kp C_NEXT &trans &kp BSPC
   &bt BT_CLR &bt BT_SEL 0  &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3  &bt BT_SEL 4   &kp LEFT &kp DOWN   &kp UP   &kp RIGHT  &trans &trans
   &kp LSHFT  &trans        &trans       &trans       &trans        &trans         &trans   &trans     &trans   &trans     &trans &bootloader
                                    &trans     &trans       &trans      &trans  &trans   &trans
                        >;
                };
        };
};
